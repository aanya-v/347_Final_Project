"GB", "SIM_GIPERT", "ZSN_A", "nr_11", "nr_01", "nr_02", "nr_03",
"nr_04", "nr_07", "nr_08", "np_01", "np_04", "np_05", "np_07",
"np_08", "np_09", "np_10", "endocr_01", "endocr_02", "endocr_03",
"zab_leg_01", "zab_leg_02", "zab_leg_03", "zab_leg_04", "zab_leg_06",
"S_AD_ORIT", "D_AD_ORIT", "O_L_POST", "K_SH_POST", "MP_TP_POST",
"SVT_POST", "GT_POST", "FIB_G_POST", "ant_im", "lat_im", "inf_im",
"post_im", "IM_PG_P", "ritm_ecg_p_01", "ritm_ecg_p_02", "ritm_ecg_p_04",
"ritm_ecg_p_06", "ritm_ecg_p_07", "ritm_ecg_p_08", "n_r_ecg_p_01",
"n_r_ecg_p_02", "n_r_ecg_p_03", "n_r_ecg_p_04", "n_r_ecg_p_05",
"n_r_ecg_p_06", "n_r_ecg_p_08", "n_r_ecg_p_09", "n_r_ecg_p_10",
"n_p_ecg_p_01", "n_p_ecg_p_03", "n_p_ecg_p_04", "n_p_ecg_p_05",
"n_p_ecg_p_06", "n_p_ecg_p_07", "n_p_ecg_p_08", "n_p_ecg_p_09",
"n_p_ecg_p_10", "n_p_ecg_p_11", "n_p_ecg_p_12", "fibr_ter_01",
"fibr_ter_02", "fibr_ter_03", "fibr_ter_05", "fibr_ter_06",
"fibr_ter_07", "fibr_ter_08", "K_BLOOD", "NA_BLOOD", "ALT_BLOOD",
"AST_BLOOD", "L_BLOOD", "ROE", "TIME_B_S", "R_AB_1_n", "R_AB_2_n",
"R_AB_3_n", "NITR_S", "NA_R_1_n", "NA_R_2_n", "NA_R_3_n", "NOT_NA_1_n",
"NOT_NA_2_n", "NOT_NA_3_n", "LID_S_n", "B_BLOK_S_n", "ANT_CA_S_n",
"GEPAR_S_n", "ASP_S_n", "TIKL_S_n", "TRENT_S_n", "PREDS_TAH",
"JELUD_TAH", "FIBR_JELUD", "A_V_BLOK", "RAZRIV", "DRESSLER")
# Function to calculate mean difference for a single variable
calculate_mean_difference <- function(df, var) {
mean_true <- mean(df$REC_IM[df[[var]] == 1 & df[[paste0(var, "_imp")]] == FALSE])
mean_false <- mean(df$REC_IM[df[[var]] == 1 & df[[paste0(var, "_imp")]] == TRUE])
return(mean_true - mean_false)
}
# Apply the function across the variables
mean_differences <- sapply(variables_to_iterate, function(var) {
calculate_mean_difference(mi2, var)
})
# Create a summary dataframe
summary_results <- data.frame(variable = variables_to_iterate, mean_difference = mean_differences)
# Print the summary
print(summary_results)
hist(mi$age)
hist(mi$age, na.rm=TRUE)
hist(mi$AGE, na.rm=TRUE)
hist(mi$AGE, na.rm=TRUE, color=redorange)
hist(mi$AGE, na.rm=TRUE, col="redorange")
hist(mi$AGE, na.rm=TRUE, col="red")
hist(mi$AGE, na.rm=TRUE, col="darkred")
# Create a pie chart
pie(table(mi$SEX), labels = paste(names(table(mi$SEX)), ": ", sex_counts, sep = ""),
main = "Distribution of Sex in mi Data")
# Create a pie chart
pie(table(mi$SEX), labels = paste(names(table(mi$SEX)), ": ", table(mi$SEX), sep = ""),
main = "Distribution of Sex in mi Data")
pie(table(mi$SEX), labels = paste(names(table(mi$SEX)), ": ", table(mi$SEX), sep = "", col="darkred"),
main = "Distribution of Sex in mi Data")
pie(table(mi$SEX), col="darkred", labels = paste(names(table(mi$SEX)), ": ", table(mi$SEX), sep = ""),
main = "Distribution of Sex in mi Data")
pie(table(mi$SEX), col=c("darkred", "white"), labels = paste(names(table(mi$SEX)), ": ", table(mi$SEX), sep = ""),
main = "Distribution of Sex in mi Data")
pie(table(mi$SEX), col=c("darkred", "white"), labels = c("Female", "Male"), ": ", table(mi$SEX), sep = ""),
pie(table(mi$SEX),
col = c("darkred", "white"),  # Colors for each category ("Female" and "Male")
labels = c("Female", "Male"),  # Labels for each slice
main = "Distribution of Sex in mi Data",  # Main title of the pie chart
sep = ": "  # Separator between label and count
)
hist(mi$AGE, na.rm=TRUE, col="darkred")
sex_counts <- table(mi$SEX)
sex_percentages <- prop.table(sex_counts) * 100  # Calculate percentages
# Create labels with counts and percentages
labels <- paste(names(sex_counts), ": ", sex_counts, " (", round(sex_percentages, 1), "%)", sep = "")
# Create a pie chart
pie(sex_counts,
col = c("darkred", "white"),  # Colors for each category ("Female" and "Male")
labels = labels,  # Labels with counts and percentages
main = "Distribution of Sex in mi Data",  # Main title of the pie chart
sep = ""  # No separator needed now
)
hist(mi$AGE, na.rm=TRUE, col="darkred")
mi$SEX <- factor(mi$SEX, levels = c(0, 1), labels = c("Female", "Male"))
# Calculate frequencies and percentages
sex_counts <- table(mi$SEX)
sex_percentages <- prop.table(sex_counts) * 100  # Calculate percentages
# Create labels with counts and percentages
labels <- paste(names(sex_counts), ": ", sex_counts, " (", round(sex_percentages, 1), "%)", sep = "")
# Create a pie chart
pie(sex_counts,
col = c("darkred", "white"),  # Colors for each category ("Female" and "Male")
labels = labels,  # Labels with counts and percentages
main = "Distribution of Sex in mi Data",  # Main title of the pie chart
sep = ""  # No separator needed now
pie(table(mi$SEX),
col = c("darkred", "white"),  # Colors for each category ("Female" and "Male")
labels = c("Female", "Male"),  # Labels for each slice
main = "Distribution of Sex in mi Data",  # Main title of the pie chart
sep = ": "  # Separator between label and count
)
sex_percentages <- prop.table(sex_counts) * 100
prop.table(sex_counts) * 100
pie(table(mi$SEX),
col = c("darkred", "white"),  # Colors for each category ("Female: 37.35%" and "Male: 62.65%")
labels = c("Female", "Male"),  # Labels for each slice
main = "Distribution of Sex in mi Data",  # Main title of the pie chart
sep = ": "  # Separator between label and count
)
pie(table(mi$SEX),
col = c("darkred", "white"),
labels = c("Female: 37.35%", "Male: 62.65%"),
main = "Distribution of Sex in mi Data",
sep = ": "
)
pie(table(mi$SEX),
col = c("white", "darkred"),
labels = c("Female: 37.35%", "Male: 62.65%"),
main = "Distribution of Sex in mi Data",
sep = ": "
)
hist(mi$AGE, na.rm=TRUE, col="darkred")
#Find parameter estimates
log.df <- glm(REC_IM~NA_R_3_n+ np_01+AGE+zab_leg_01 + np_01:AGE, data=mi1, family = 'binomial')
Y_pred <- predict(log.df,type='response')
summary(Y_pred)
#Assigning to dataset
mi1$y_pred <- Y_pred
#Calibration in the large
mean(mi1$y_pred)
mean(mi1$REC_IM)
#Prepare data for calibration plot
#Compute deciles
dec <- quantile(mi1$y_pred,
probs=seq(0,1,by=0.1),
type=3)
dec
#Add deciles as variable
mi1$dec_grp <- cut(mi1$y_pred,
breaks = dec,
include.lowest = T,
labels = 1:10)
#Verify groups are even
table(mi1$dec_grp)
prop.table(table(mi1$dec_grp))
#Compute mean predicted probability and event rate by decile group
mi1$y_pred <- as.numeric(mi1$y_pred)
summary(mi1$y_pred)
agg <- aggregate(cbind(REC_IM, y_pred) ~ dec_grp,
data = mi1,
FUN = 'mean')
agg
#Check computations
mean(mi1$REC_IM[mi1$dec_grp == 5])
mean(mi1$y_pred[mi1$dec_grp == 5])
#Calibration Plot
plot(agg$y_pred,                         # x-coor = mean pred prob in dec group
agg$REC_IM,                            # y-coor = obs event rate in dec group
xlim=c(0,1),
ylim=c(0,1),
main = 'Calibration Plot',          # Add main title
ylab = 'Observed Event Rate',       # Add y-axis label
xlab = 'Predicted Probabilities',   # Add x-axis label
pch = 19,                           # Plotting character = solid dot
col = 'orangered',                  # Color of plotting character
cex = 2)                            # Size of plotting character (base = 1)
# Add identity line
abline(a = 0,                            # a = intercept
b = 1)                            # b = slope
# Add fitted regression line
cal.fit <- lm(REC_IM ~ y_pred, data = agg) # Fit linear model to plot data
abline(cal.fit,                         # Using intercept and slope from linear model fit
lty = 2,                         # Dashed line
col = 'royalblue',               # Color of plotting line
lwd = 3)                         # Thickness of plotting line (base = 1)
summary(cal.fit)                        # Compute calibration intercept and slope
confint(cal.fit)                        # Compute  95% confidence intervals
# Plot density of predicted probabilities by event status
ggplot(mi1,
aes(y_pred,
fill=as.factor(REC_IM))) +
geom_density(alpha = 0.2) +
scale_fill_manual(
values=c("orangered", "royalblue"))
#Create ROC curve plot and compute AUC
roc.mod <- roc(mi1$REC_IM,
mi1$y_pred)
plot.roc(roc.mod)
auc(roc.mod)
ci.auc(roc.mod)
summary(log.df)
#Find parameter estimates
log.df <- glm(REC_IM~NA_R_3_n+ np_01+AGE+zab_leg_01, data=mi1, family = 'binomial')
summary(log.df)
#Find parameter estimates (based on stepwise selection in SAS)
logk.df <- glm(REC_IM~NA_R_3_n+ np_01 +AGE+ GEPAR_S_n+ ritm_ecg_p_07, data=mi2, family = 'binomial')
logk.df
summary(logk.df)
#Find parameter estimates (based on stepwise selection in SAS)
logk.df <- glm(REC_IM~NA_R_3_n+ np_01 +AGE+ GEPAR_S_n+ ritm_ecg_p_07 + np_01:age, data=mi2, family = 'binomial')
#Find parameter estimates (based on stepwise selection in SAS)
logk.df <- glm(REC_IM~NA_R_3_n+ np_01 +AGE+ GEPAR_S_n+ ritm_ecg_p_07 + np_01:AGE, data=mi2, family = 'binomial')
summary(logk.df)
#Find parameter estimates (based on stepwise selection in SAS)
logk.df <- glm(REC_IM~NA_R_3_n+ np_01 +AGE+ GEPAR_S_n+ ritm_ecg_p_07, data=mi2, family = 'binomial')
summary(logk.df)
#Output
summary(bsub.bic.fit$BestModel)
mi1 <- mi
#Counting NA per variable
na_counts_base <- colSums(is.na(mi1))
#print(na_counts_base)
#Variables with >500 missing
is.vector(na_counts_base)
#print(na_counts_base[na_counts_base > 500])
#Removing >500 NA variables
mi1$IBS_NASL <- NULL
mi1$S_AD_KBRIG <- NULL
mi1$D_AD_KBRIG <- NULL
mi1$KFK_BLOOD <- NULL
mi1$NA_KB <- NULL
mi1$NOT_NA_KB <- NULL
mi1$LID_KB <- NULL
mi1$DLIT_AG <- NULL
mi1$GIPO_K <- NULL
mi1$GIPER_NA <- NULL
#Variables with 200-500 NA
#print(na_counts_base[na_counts_base >200& na_counts_base<=500])
#Remove missing
#Variables of interest
remove_obs <- c("endocr_02", "NITR_S")
#Keep only complete rows
mi1 <- mi1[complete.cases(mi1[remove_obs]), ]
#Verify
summary(mi1$NITR_S)
summary(mi1$endocr_02)
(colSums(is.na(mi1)) / nrow(mi1)) * 100
sum(is.na(mi1), na.rm=TRUE) / prod(dim(mi1))
#Median
#Select variables
#print(names(mi1))
na_median_vars <- c("AGE", "FK_STENOK", "IBS_POST", "GB", "lat_im", "fibr_ter_01", "fibr_ter_02",
"fibr_ter_03",   "fibr_ter_05",   "fibr_ter_06",   "fibr_ter_07", "fibr_ter_08", "L_BLOOD", "TIME_B_S", "R_AB_1_n", "R_AB_2_n", "R_AB_3_n", "NA_R_1_n", "NA_R_2_n", "NA_R_3_n", "NOT_NA_1_n", "NOT_NA_2_n", "NOT_NA_3_n", "LID_S_n", "B_BLOK_S_n", "ANT_CA_S_n", "S_AD_ORIT", "D_AD_ORIT", "K_BLOOD", "NA_BLOOD", "ALT_BLOOD", "AST_BLOOD", "ROE", "GEPAR_S_n", "INF_ANAM", "endocr_01", "ant_im", "n_r_ecg_p_01", "n_r_ecg_p_02", "n_r_ecg_p_03", "n_r_ecg_p_04", "n_r_ecg_p_05", "n_r_ecg_p_06", "n_r_ecg_p_07", "n_r_ecg_p_08", "n_r_ecg_p_09", "n_r_ecg_p_10", "n_p_ecg_p_01", "n_p_ecg_p_02", "n_p_ecg_p_03","n_p_ecg_p_04", "n_p_ecg_p_05","n_p_ecg_p_06", "n_p_ecg_p_07", "n_p_ecg_p_08", "n_p_ecg_p_09", "n_p_ecg_p_10", "n_p_ecg_p_11", "n_p_ecg_p_12", "ASP_S_n", "TIKL_S_n", "TRENT_S_n")
# Loop to replace variables
for(col in na_median_vars){
median_val <- median(mi1[[col]], na.rm=TRUE)
mi1[[col]][is.na(mi1[[col]])] <- median_val
}
#Verify loop ran correctly
summary(mi1$AGE)
#Select variables for mode
na_mode_vars <- c("SIM_GIPERT", "ZSN_A", "nr_11", "nr_01", "nr_02", "nr_03", "nr_04", "nr_07", "nr_08",  "np_01", "np_04", "np_05", "np_07", "np_08", "np_09", "np_10", "endocr_03", "zab_leg_01", "zab_leg_02", "zab_leg_03", "zab_leg_04", "zab_leg_06", "O_L_POST", "K_SH_POST", "MP_TP_POST", "SVT_POST", "GT_POST", "FIB_G_POST", "inf_im", "post_im", "IM_PG_P", "ritm_ecg_p_01", "ritm_ecg_p_02", "ritm_ecg_p_04", "ritm_ecg_p_06", "ritm_ecg_p_07", "ritm_ecg_p_08")
# Loop for mode
for(col in na_mode_vars){
mode_val <- as.numeric(names(sort(table(mi1[[col]], useNA="ifany"), decreasing=TRUE))[1])
mi1[[col]][is.na(mi1[[col]])] <- mode_val
}
# Convert variables back to numeric
mi1[] <- lapply(mi1, as.numeric)
# Verify
summary(mi1$ZSN_A)
#Imputation with mean
mi1$STENOK_AN[which(is.na(mi1$STENOK_AN))] <- mean (mi1$STENOK_AN, na.rm=TRUE)
summary(mi1$STENOK_AN)
# Assuming mi1 is your dataframe and you want to regress REC_IM on NA_R_3_n, np_01, AGE, and zab_leg_01 with interaction terms
log.df <- glm(REC_IM ~ NA_R_3_n * np_01 * AGE * zab_leg_01, data = mi1, family = 'binomial')
summary(log.df)
#Find parameter estimates
log.df <- glm(REC_IM~NA_R_3_n+ np_01+AGE+zab_leg_01+NA_R_3_n:AGE , data=mi1, family = 'binomial')
summary(log.df)
Y_pred <- predict(log.df,type='response')
summary(Y_pred)
#Assigning to dataset
mi1$y_pred <- Y_pred
#Calibration in the large
mean(mi1$y_pred)
mean(mi1$REC_IM)
#Prepare data for calibration plot
#Compute deciles
dec <- quantile(mi1$y_pred,
probs=seq(0,1,by=0.1),
type=3)
dec
#Add deciles as variable
mi1$dec_grp <- cut(mi1$y_pred,
breaks = dec,
include.lowest = T,
labels = 1:10)
#Verify groups are even
table(mi1$dec_grp)
prop.table(table(mi1$dec_grp))
#Compute mean predicted probability and event rate by decile group
mi1$y_pred <- as.numeric(mi1$y_pred)
summary(mi1$y_pred)
agg <- aggregate(cbind(REC_IM, y_pred) ~ dec_grp,
data = mi1,
FUN = 'mean')
agg
#Check computations
mean(mi1$REC_IM[mi1$dec_grp == 5])
mean(mi1$y_pred[mi1$dec_grp == 5])
#Calibration Plot
plot(agg$y_pred,                         # x-coor = mean pred prob in dec group
agg$REC_IM,                            # y-coor = obs event rate in dec group
xlim=c(0,1),
ylim=c(0,1),
main = 'Calibration Plot',          # Add main title
ylab = 'Observed Event Rate',       # Add y-axis label
xlab = 'Predicted Probabilities',   # Add x-axis label
pch = 19,                           # Plotting character = solid dot
col = 'orangered',                  # Color of plotting character
cex = 2)                            # Size of plotting character (base = 1)
# Add identity line
abline(a = 0,                            # a = intercept
b = 1)                            # b = slope
# Add fitted regression line
cal.fit <- lm(REC_IM ~ y_pred, data = agg) # Fit linear model to plot data
abline(cal.fit,                         # Using intercept and slope from linear model fit
lty = 2,                         # Dashed line
col = 'royalblue',               # Color of plotting line
lwd = 3)                         # Thickness of plotting line (base = 1)
summary(cal.fit)                        # Compute calibration intercept and slope
confint(cal.fit)                        # Compute  95% confidence intervals
# Plot density of predicted probabilities by event status
ggplot(mi1,
aes(y_pred,
fill=as.factor(REC_IM))) +
geom_density(alpha = 0.2) +
scale_fill_manual(
values=c("orangered", "royalblue"))
#Create ROC curve plot and compute AUC
roc.mod <- roc(mi1$REC_IM,
mi1$y_pred)
plot.roc(roc.mod)
auc(roc.mod)
ci.auc(roc.mod)
#create new dataset
m3 <- m2
#create new dataset
mi3 <- mi2
mi3$NA_R_3_n:np_01 <- mi3$NA_R_3_n * mi3$np_01
mi3$NA_R_3_n.np_01 <- mi3$NA_R_3_n * mi3$np_01
summary(mi3_NA_R_3_n.np_01)
summary(mi3$NA_R_3_n.np_01)
mi3$NA_R_3_n.np_01 <- mi3$NA_R_3_n * mi3$np_01
summary(mi3$NA_R_3_n.np_01)
mi3$NA_R_3_nANDnp_01 <- mi3$NA_R_3_n * mi3$np_01
summary(mi3$NA_R_3_nANDnp_01)
summary(mi3$NA_R_3_n)
summary(mi3$np_01)
# List of variables
variables <- c("NA_R_3_n", "np_01", "AGE", "GEPAR_S_n", "ritm_ecg_p_07", "zab_leg_01")
# Loop through all combinations of variables and create new variables
for (i in 1:length(variables)) {
for (j in (i+1):length(variables)) {
var1 <- variables[i]
var2 <- variables[j]
new_var_name <- paste(var1, var2, sep = ".")
mi3[[new_var_name]] <- mi3[[var1]] * mi3[[var2]]
}
}
mi3$NA_R_3_n.np_01 <- NULL
# Loop through all combinations of variables and create new variables
for (i in 1:length(variables)) {
for (j in (i+1):length(variables)) {
var1 <- variables[i]
var2 <- variables[j]
new_var_name <- paste(var1, var2, sep = ".")
mi3[[new_var_name]] <- mi3[[var1]] * mi3[[var2]]
}
}
# Loop through all combinations of variables and create new variables
for (i in 1:length(variables)) {
for (j in (i+1):length(variables)) {
var1 <- variables[i]
var2 <- variables[j]
new_var_name <- paste(var1, var2, sep = ".")
# Check if the new variable already exists in the dataframe
if (!(new_var_name %in% names(mi3))) {
# Perform multiplication and create new variable
mi3[[new_var_name]] <- mi3[[var1]] * mi3[[var2]]
} else {
# If the variable already exists, skip and print a message
cat(paste("Variable", new_var_name, "already exists.\n"))
}
}
}
mi3$AGE.GEPAR_S_n
mi3$AGE
#create new dataset
mi3 <- mi2
mi3$NA_R_3_n.np_01 <- NULL
# List of variables
variables <- c("NA_R_3_n", "np_01", "AGE", "GEPAR_S_n", "ritm_ecg_p_07", "zab_leg_01")
# Loop through all combinations of variables and create new variables
for (i in 1:length(variables)) {
for (j in (i+1):length(variables)) {
var1 <- variables[i]
var2 <- variables[j]
new_var_name <- paste(var1, var2, sep = "*")
# Check if the new variable already exists in the dataframe
if (!(new_var_name %in% names(mi3))) {
# Perform multiplication and create new variable
mi3[[new_var_name]] <- mi3[[var1]] * mi3[[var2]]
} else {
# If the variable already exists, skip and print a message
cat(paste("Variable", new_var_name, "already exists.\n"))
}
}
}
# Load the plotly package
library(plotly)
summary(vgsales)
#Introduction to plotly
install.packages("plotly")
# Load the plotly package
library(plotly)
summary(vgsales)
ggplotly(mi2$AGE)
ggplotly(mi2)
ggplotly(AGE, data=mi2)
ggplotly("AGE", data=mi2)
mi2$AGE <- as.numeric(mi2$AGE)
ggplotly("AGE", data=mi2)
PErisk <- read.csv("PErisk.csv")
PErisk <- read.csv("PErisk.csv")
#plots for continuous variables
qplot(PErisk$gdpw2, geom= "histogram", bins=10)
qplot(tips$tip, geom="histogram", bins=10)
qplot(data=tips, x=tip, geom='histogram', bins=10, main='Histogram of Tip', xlab= 'Tip Variable',
ylab='Frequency', color= I('black'), alpha = 0.7, fill='red')
qplot(y = PErisk$gdpw2, geom = "boxplot", main='Boxplot of GDP per Capita', ylab='GDP per capita',
alpha=0.5)
qplot(x = tip, y = smoker, data = tips, geom = "boxplot")
knitr::opts_chunk$set(echo = TRUE)
getwd()
source("C:/Users/16823/OneDrive - Emory University/QTM347/347_Final_Project/Clean_Datasets.R", echo=TRUE)
setwd("C:/Users/16823/OneDrive - Emory University/QTM347/347_Final_Project")
#Clean second dataset to use in models
library(dplyr)
library(VIM)
data <- read.csv("exercise_dataset.csv")
cal <- read.csv("calories.csv")
#Turn gender into binary
data$Gender <- ifelse(data$Gender == "Female", 1, 0)
data$Gender
#Calculate Height
data$Actual.Weight
data$Height <- 100*sqrt(data$Actual.Weight / data$BMI)
data$Height
data_clean <- data %>%
select(Calories.Burn, Age, Gender, Duration, Heart.Rate, Actual.Weight, Height)
summary(data_clean)
names(data_clean) <- c("Calories", "Age", "Gender", "Duration", "Heart_Rate", "Weight", "Height")
write.csv(data_clean, "calories2.csv", row.names=FALSE)
summary(cal)
#Impute Body Temp
#Rename variables to match
df <- data_clean
#names(df) <- c("Calories", "Age", "Gender", "Duration", "Heart_Rate", "Weight", "Height")
#Add column for Body_Temp
df$Body_Temp <- as.numeric(NA)
#Drop User_ID
cal <- cal[, !(names(cal) == "User_ID")]
#Make Gender a dummy variable
cal$Gender <- ifelse(cal$Gender == "female", 1, 0)
#Combine datasets
combined_df <- rbind(cal, df)
summary(combined_df)
nrow(combined_df)
# Impute missing values using kNN method
imputed <- kNN(combined_df, k=20)
summary(imputed$Body_Temp)
combined_df[15000, ]
combined_df[15001, ]
imputed <- imputed[-(1:15000), ]
imputed[1, ]
imputed_drop <- imputed %>%
select(Gender, Age, Height, Weight, Duration, Heart_Rate, Body_Temp, Calories)
write.csv(imputed_drop, "imputed.csv", row.names=FALSE)
summary(imputed_drop)
cal$Height
data$Height
#Clean gym dataset
gym<- read.csv("gym_members_exercise_tracking.csv")
summary(gym)
gym <- gym %>%
select(Age, Gender, Weight..kg., Height..m., Avg_BPM, Session_Duration..hours., Calories_Burned)
summary(gym)
names(gym) <- c("Age", "Gender", "Weight", "Height", "Heart_Rate", "Duration", "Calories")
gym$Gender
#Gender to binary
gym$Gender <- ifelse(data$Gender == "Female", 1, 0)
#Gender to binary
gym$Gender <- ifelse(gym$Gender == "Female", 1, 0)
gym$Gender
#Height units
gym$Height <- gym$Height *100
gym$Height
#Duration in minutes
gym$Duration <- gym$Duration*60
write.csv(gym, "gym_nonimputed.csv", rownames=FALSE)
write.csv(gym, "gym_nonimputed.csv", row.names=FALSE)
gym$Body_Temp <- NA
imputed$Gender
imputed$Height
#impute body temp
#Combine datasets
combined <- rbind(cal, gym)
summary(combined)
nrow(combined)
# Impute missing values using kNN method
imputed1 <- kNN(combined, k=20)
summary(imputed$Body_Temp)
summary(cal$Body_Temp)
combined[15000, ]
combined[15001, ]
imputed1 <- imputed1[-(1:15000), ]
imputed1[1, ]
imputed1_drop <- imputed1 %>%
select(Gender, Age, Height, Weight, Duration, Heart_Rate, Body_Temp, Calories)
write.csv(imputed1_drop, "gym_imputed.csv", row.names=FALSE)
